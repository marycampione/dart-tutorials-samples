// Auto-generated from xmilestone.html.
// DO NOT EDIT.

library x_milestone;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'package:web_ui/observe/observable.dart' as __observe;
import 'package:web_ui/web_ui.dart';
import 'milestone.dart';
import 'count_down.dart';



class MilestoneComponent extends WebComponent with Observable  {
  /** Autogenerated from the template. */

  autogenerated.ScopedCssMapper _css;

  /** This field is deprecated, use getShadowRoot instead. */
  get _root => getShadowRoot("x-milestone");
  static final __shadowTemplate = new autogenerated.DocumentFragment.html('''
        <span></span> <button>-</button>
      ''');
  autogenerated.ButtonElement __e14;
  autogenerated.SpanElement __e13;
  autogenerated.Template __t;

  void created_autogenerated() {
    var __root = createShadowRoot("x-milestone");
    setScopedCss("x-milestone", new autogenerated.ScopedCssMapper({"x-milestone":"[is=\"x-milestone\"]"}));
    _css = getScopedCss("x-milestone");
    __t = new autogenerated.Template(__root);
    __root.nodes.add(__shadowTemplate.clone(true));
    __e13 = __root.nodes[1];
    var __binding12 = __t.contentBind(() => timeRemainingAsString, false);
    __e13.nodes.add(__binding12);
    __e14 = __root.nodes[3];
    __t.listen(__e14.onClick, ($event) { removeMilestone(); });
    __t.create();
  }

  void inserted_autogenerated() {
    __t.insert();
  }

  void removed_autogenerated() {
    __t.remove();
    __t = __e13 = __e14 = null;
  }

  /** Original code from the component. */

  Milestone __$milestone;
  Milestone get milestone {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'milestone');
    }
    return __$milestone;
  }
  set milestone(Milestone value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'milestone',
          __$milestone, value);
    }
    __$milestone = value;
  }
  String __$_displayString = '';
  String get _displayString {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, '_displayString');
    }
    return __$_displayString;
  }
  set _displayString(String value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, '_displayString',
          __$_displayString, value);
    }
    __$_displayString = value;
  }
  
  // xx: Internationalize this.
  @observable String get timeRemainingAsString { 
    if (milestone.elapsed) {
      _displayString = 'Huzzah for ${milestone.milestoneName}!';
      return _displayString;
    }
    
    // Calculate days, hours, and minutes remaining.
    Duration timeRemaining = milestone.timeRemaining;
    
    int d = timeRemaining.inDays;
    int h = timeRemaining.inHours.remainder(Duration.HOURS_PER_DAY);
    int m = timeRemaining.inMinutes.remainder(Duration.MINUTES_PER_HOUR);
    int s = timeRemaining.inSeconds.remainder(Duration.SECONDS_PER_MINUTE);
    
    // Format individual pieces of the display string.
    String days = (d == 0) ? '' : '$d days, ';
    String hours = (h == 0) ? '' : '$h hours, ';
    String minutes = (m == 0) ? '' : '$m minutes, ';
    String seconds = '$s seconds';
    
    _displayString = '$days $hours $minutes $seconds until ${milestone.milestoneName}';
    return _displayString;
  }
  
  void removeMilestone() {
    appObject.removeMilestone(milestone);
  }
}
//# sourceMappingURL=xmilestone.dart.map