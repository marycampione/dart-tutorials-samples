// Auto-generated from xcountdown.html.
// DO NOT EDIT.

library x_count_down;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'package:web_ui/observe/observable.dart' as __observe;
import 'xmilestone.dart';
import 'package:web_ui/web_ui.dart';
import 'dart:html';
import 'dart:async';
import 'dart:indexed_db';
import 'milestone.dart';
import 'count_down.dart';



class CountDownComponent extends WebComponent with Observable  {
  /** Autogenerated from the template. */

  autogenerated.ScopedCssMapper _css;

  /** This field is deprecated, use getShadowRoot instead. */
  get _root => getShadowRoot("x-count-down");
  static final __html1 = new autogenerated.Element.tag('template'), __html2 = new autogenerated.Element.html('<li>\n                    <div is="x-milestone">\n                    </div>\n                  </li>'), __shadowTemplate = new autogenerated.DocumentFragment.html('''
          
          <div>
            <p>Enter a milestone</p>
            
            <input type="text" name="newMilestoneName">
            <input type="date" name="newMilestoneDate">
            <input type="time" name="newMilestoneTime">
            <button id="addbutton">+</button>
            
            <ul>
              <template></template>
            </ul>
          </div>
          <div>
            <button id="clearbutton">Clear</button>
            <p style="color:red"></p>
          </div>
          
        ''');
  autogenerated.ButtonElement __e4, __e9;
  autogenerated.Element __e8;
  autogenerated.InputElement __e1, __e2, __e3;
  autogenerated.ParagraphElement __e11;
  autogenerated.Template __t;

  void created_autogenerated() {
    var __root = createShadowRoot("x-count-down");
    setScopedCss("x-count-down", new autogenerated.ScopedCssMapper({"x-count-down":"[is=\"x-count-down\"]"}));
    _css = getScopedCss("x-count-down");
    __t = new autogenerated.Template(__root);
    __root.nodes.add(__shadowTemplate.clone(true));
    __e1 = __root.nodes[1].nodes[3];
    __t.listen(__e1.onInput, ($event) { newMilestoneName = __e1.value; });
    __t.oneWayBind(() => newMilestoneName, (e) { if (__e1.value != e) __e1.value = e; }, false, false);
    __e2 = __root.nodes[1].nodes[5];
    __t.listen(__e2.onInput, ($event) { newMilestoneDate = __e2.value; });
    __t.oneWayBind(() => newMilestoneDate, (e) { if (__e2.value != e) __e2.value = e; }, false, false);
    __e3 = __root.nodes[1].nodes[7];
    __t.listen(__e3.onInput, ($event) { newMilestoneTime = __e3.value; });
    __t.oneWayBind(() => newMilestoneTime, (e) { if (__e3.value != e) __e3.value = e; }, false, false);
    __e4 = __root.nodes[1].nodes[9];
    __t.listen(__e4.onClick, ($event) { addMilestone(); });
    __e8 = __root.nodes[1].nodes[11].nodes[1];
    __t.conditional(__e8, () => appObject.hazMilestones, (__t) {
      var __e7;
      __e7 = __html1.clone(true);
      __t.loop(__e7, () => appObject.milestones, ($list, $index, __t) {
        var milestone = $list[$index];
        var __e5, __e6;
        __e6 = __html2.clone(true);
        __e5 = __e6.nodes[1];
        __t.oneWayBind(() => milestone, (e) { if (__e5.xtag.milestone != e) __e5.xtag.milestone = e; }, false, false);
        __t.component(new MilestoneComponent()..host = __e5);
      __t.addAll([new autogenerated.Text('\n                  '),
          __e6,
          new autogenerated.Text('\n                ')]);
      });
    __t.addAll([new autogenerated.Text('\n                '),
        __e7,
        new autogenerated.Text('\n              ')]);
    });

    __e9 = __root.nodes[3].nodes[1];
    __t.listen(__e9.onClick, ($event) { clear(); });
    __e11 = __root.nodes[3].nodes[3];
    var __binding10 = __t.contentBind(() => errorMsg, false);
    __e11.nodes.addAll([new autogenerated.Text(' '),
        __binding10,
        new autogenerated.Text(' ')]);
    __t.create();
  }

  void inserted_autogenerated() {
    __t.insert();
  }

  void removed_autogenerated() {
    __t.remove();
    __t = __e1 = __e2 = __e3 = __e4 = __e8 = __e9 = __e11 = null;
  }

  /** Original code from the component. */

  
  // Observe errorMsg.
  // It displays a message for the user.
  String __$errorMsg = '';
  String get errorMsg {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'errorMsg');
    }
    return __$errorMsg;
  }
  set errorMsg(String value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'errorMsg',
          __$errorMsg, value);
    }
    __$errorMsg = value;
  }

  // These are bound to input elements.
  String newMilestoneName = "New Year's Day";
  String newMilestoneDate = '2014-01-01';
  String newMilestoneTime = '00:00:00';
  
  /*
   * Click handlers.
   * NOTE: Minus - button handler is in xmilestone web component.
   */
  // Plus + button click handler.
  void addMilestone() {
    String str = newMilestoneDate + ' ' + newMilestoneTime;  
    DateTime occursOn = DateTime.parse(str);

    appObject.addMilestone(newMilestoneName, occursOn);
  }

  // Clear button click handler.
  void clear() {
    errorMsg = '';
    appObject.clear();
  }
   
  /*
   * Life-cycle bizness
   */
  void inserted() {
    appObject.start()
      .catchError((e) {
        (query('#addbutton') as ButtonElement).disabled = true;
        (query('#clearbutton') as ButtonElement).disabled = true;
        errorMsg = e.toString();
      });
  }
  
  void removed() {
    appObject.stop();
  }
} // end class

//# sourceMappingURL=xcountdown.dart.map