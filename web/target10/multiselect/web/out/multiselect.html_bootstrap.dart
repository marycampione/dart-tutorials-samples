import "dart:html" as FB;import "dart:async" as iB;import "dart:collection" as qB;import "dart:isolate" as rD;class ZD{static const  aD="Chrome";final  RD;final  minimumVersion;const ZD(this.RD,[this.minimumVersion]);}class bD{const bD();}class cD{final  name;const cD(this.name);}class dD{const dD();}class eD{const eD();}final  LB=lC({'The Cat in the Hat':true,'War and Peace':false,'Pride and Prejudice':true,'On the Road':true,'The Hunger Games':true,'The Java Tutorial':false,'The Joy of Cooking':false,'Goodnight Moon':true}); ZC(){FB.window.onLoad.listen((i){var g=(FB.query('#bookselector') as FB.SelectElement).options;print(g.length);g.forEach((h)=>h.selected=LB[h.value]);});} get aC{return LB.keys.where((g)=>LB[g]).toList();} bC( g){var h=(FB.query('#bookselector') as FB.SelectElement).selectedOptions;LB.forEach((i,j)=>LB[i]=false);h.forEach((g)=>LB[g.value]=true);} cC(){var yD=FB.document.body;final zD=new FB.Element.html('<h4>You chose:</h4>'),AE=new FB.Element.html('<select multiple="" id="bookselector">\n            <option style="display:none"></option>\n        </select>'),BE=new FB.Element.html('<option template="" repeat="key in books.keys"></option>'),CE=new FB.Element.html('<ul>\n           <li style="display:none"></li>\n        </ul>'),DE=new FB.Element.html('<li template="" repeat="selected in booksselected"></li>');var EE;var FE=new KC(yD);EE=yD.nodes[3].nodes[3];FE.TD(EE,()=>!LB.isEmpty,(FE){var GE,HE,IE,JE;HE=AE.clone(true);GE=HE.nodes[1];FE.loop(GE,()=>LB.keys,(h,g,FE){var j=h[g];var KE;KE=BE.clone(true);var LE=FE.RC(()=>j,false);KE.nodes.add(LE);FE.XD(()=>j,(i){if(KE.value!=i)KE.value=i;},false,false);FE.add(KE);});FE.listen(HE.onChange,(l){bC(l);});JE=CE.clone(true);IE=JE.nodes[1];FE.loop(IE,()=>aC,(h,g,FE){var v=h[g];var ME;ME=DE.clone(true);var NE=FE.RC(()=>v,false);ME.nodes.add(NE);FE.add(ME);});FE.addAll([new FB.Text('\n        \n        '),new FB.Text('\n        '),HE,new FB.Text('\n\n        '),zD.clone(true),new FB.Text('\n        '),JE,new FB.Text('\n      ')]);});FE.fB();FE.insert();}main(){MC=false;MB.sB.WD.listen((g){print('${g.gB.name.toLowerCase()}: ${g.message}');});ZC();cC();}var rB=false;var dC=o.GC;class MB{final  name; get UC=>(parent==null||parent.name=='')?name:'${parent.UC}.${name}';final  parent;var OE;var children;var PE;var QE;factory MB( g){if(g.startsWith('.')){throw new ArgumentError("name shouldn't start with a '.'");}if(WB==null)WB=<String,MB>{};if(WB.containsKey(g))return WB[g];var j=g.lastIndexOf('.');var h=null;var i;if(j==-1){if(g!='')h=new MB('');i=g;}else{h=new MB(g.substring(0,j));i=g.substring(j+1);}final l=new MB.sD(i,h);WB[g]=l;return l;}MB.sD(this.name,this.parent):children=new Map<String,MB>(){if(parent!=null)parent.children[name]=this;} get gB{if(rB){if(OE!=null)return OE;if(parent!=null)return parent.gB;}return dC;} get WD=>RE(); UD( g)=>(g>=gB); log( i, l,[j]){if(UD(i)){var h=new XB(i,l,UC,j);if(rB){var g=this;while (g!=null){g.SE(h);g=g.parent;}}else{sB.SE(h);}}} info( h,[g])=>log(o.GC,h,g); DC( h,[g])=>log(o.eC,h,g); RE(){if(rB||parent==null){if(PE==null){PE=new iB.StreamController<XB>.broadcast(sync:true);QE=PE.stream;}return QE;}else{return sB.RE();}} SE( g){if(PE!=null){PE.add(g);}}static  get sB=>new MB('');static var WB;}class o implements Comparable<o>{final  name;final  value;const o(this.name,this.value);static const  GC=const o('INFO',800);static const  eC=const o('WARNING',900); operator==( g)=>g!=null&&value==g.value; operator<( g)=>value<g.value; operator<=( g)=>value<=g.value; operator>( g)=>value>g.value; operator>=( g)=>value>=g.value; compareTo( g)=>value-g.value; get hashCode=>value; toString()=>name;}class XB{final  gB;final  message;final  VD;final  time;final  YD;static var fC=0;var exception;XB(this.gB,this.message,this.VD,[this.exception]):time=new DateTime.now(),YD=XB.fC++ ;}class fD<NB> extends BD with u implements List<NB>{final  TE;fD([ g]):TE=g!=null?new List<NB>(g):<NB>[] ;factory fD.tD( g)=>new fD<NB>()..addAll(g); get length{if(q)AB(this,k.t,'length');return TE.length;}set length( h){var i=TE.length;if(i==h)return;if(JB(this)){if(h<i){for(int g=i-1;g>=h;g-- ){m(this,k.PB,g,TE[g],null);}m(this,k.t,'length',i,h);}else{m(this,k.t,'length',i,h);for(int g=i;g<h;g++ ){m(this,k.OB,g,null,null);}}}TE.length=h;} operator[]( g){if(q)AB(this,k.DB,g);return TE[g];}operator[]=( g, h){var i=TE[g];if(JB(this)){m(this,k.DB,g,i,h);}TE[g]=h;} add( h){var g=TE.length;if(JB(this)){m(this,k.t,'length',g,g+1);m(this,k.OB,g,null,h);}TE.add(h);} toString(){if(q){for(int g=0;g<length;g++ ){AB(this,k.DB,g);}}return TE.toString();}}typedef  YB<s,n>();class SB<s,n> extends u implements Map<s,n>{final  UE;var VE;var WE;SB({ createMap}):UE=createMap!=null?createMap():new Map<s,n>(){VE=new gC<s,n>(this);WE=new hC<s,n>(this);}factory SB.uD( i,{ createMap}){var g=new SB<s,n>(createMap:createMap);i.forEach(( h, j){g[h]=j;});return g;} get keys=>VE; get values=>WE; get length{if(q)AB(this,k.t,'length');return UE.length;} get isEmpty=>length==0; get isNotEmpty=>length!=0; XE( g)=>AB(this,k.DB,g); YE(){AB(this,k.t,'length');UE.keys.forEach(XE);} containsKey( g){if(q)XE(g);return UE.containsKey(g);} operator[]( g){if(q)XE(g);return UE[g];} operator[]=( h, g){var j=UE.length;var i=UE[h];UE[h]=g;if(JB(this)){if(j!=UE.length){m(this,k.t,'length',j,UE.length);m(this,k.OB,h,i,g);}else if(i!=g){m(this,k.DB,h,i,g);}}} putIfAbsent( g, j()){if(q)XE(g);var h=UE.length;var i=UE.putIfAbsent(g,j);if(JB(this)&&h!=UE.length){m(this,k.t,'length',h,UE.length);m(this,k.OB,g,null,i);}return i;} remove( g){if(q)XE(g);var h=UE.length;var i=UE.remove(g);if(JB(this)&&h!=UE.length){m(this,k.PB,g,i,null);m(this,k.t,'length',h,UE.length);}return i;} addAll( h)=>h.forEach((g,i){this[g]=i;}); clear(){var g=UE.length;if(JB(this)&&g>0){UE.forEach((i,h){m(this,k.PB,i,h,null);});m(this,k.t,'length',g,0);}UE.clear();} forEach( g( key, value)){if(q)YE();UE.forEach(g);} toString()=>qB.Maps.mapToString(this);}class gC<s,n> extends qB.IterableBase<s>{final  UE;gC(this.UE); get iterator=>new gD<s,n>(UE);}class gD<s,n> implements Iterator<s>{final  UE;final  VE;var ZE=false;gD( g):UE=g,VE=g.UE.keys.iterator; moveNext(){if(q)AB(UE,k.t,'length');return ZE=VE.moveNext();} get current{var g=VE.current;if(q&&ZE)UE.XE(g);return g;}}class hC<s,n> extends qB.IterableBase<n>{final  UE;hC(this.UE); get iterator=>new hD<s,n>(UE);}class hD<s,n> implements Iterator<n>{final  UE;final  VE;final  WE;var ZE;hD( g):UE=g,VE=g.UE.keys.iterator,WE=g.UE.values.iterator; moveNext(){if(q)AB(UE,k.t,'length');var h=VE.moveNext();var g=WE.moveNext();if(h!=g){throw new StateError('keys and values should be the same length');}return ZE=g;} get current{if(q&&ZE)UE.XE(VE.current);return WE.current;}}typedef  HB( e);typedef  iC( changes);typedef  IB();typedef  jC();class jB{final oldValue;final newValue;final  changes;jB(this.oldValue,this.newValue,[this.changes]); operator==(g){return g is jB&&oldValue==g.oldValue&&newValue==g.newValue&&changes==g.changes;} get hashCode=>xC(oldValue,newValue,changes); toString(){if(changes!=null)return '#<ChangeNotification to ${newValue}: ${changes}>';return '#<ChangeNotification from ${oldValue} to ${newValue}>';}}class k{static const t=1;static const DB=2;static const OB=DB|4;static const PB=DB|8;final  type;final key;final oldValue;final newValue;k(this.type,this.key,this.oldValue,this.newValue); operator==(g){return g is k&&type==g.type&&key==g.key&&oldValue==g.oldValue&&newValue==g.newValue;} get hashCode=>yC(type,key,oldValue,newValue); toString(){var g;switch (type){case t:g='field';break;case DB:g='index';break;case OB:g='insert';break;case PB:g='remove';break;}return '#<ChangeRecord ${g} ${key} from ${oldValue} to ${newValue}>';}} kC(g, i,[ l]){if(g is u){var h=g;return tB(h,(v){i(new jB(h,h,v));});}var j=new kB(g,i,l);if(!j.aE()){return nC;}return j.bE;} tB( g, i){if(g.VB==null)g.VB=new uB();var h=g.VB.add(i);return h.remove;}lC(g){if(g is Map){var h=null;if(g is qB.SplayTreeMap){h=()=>new qB.SplayTreeMap();}else if(g is qB.LinkedHashMap){h=()=>new qB.LinkedHashMap();}return new SB.uD(g,createMap:h);}if(g is Set)return new IC.vD(g);if(g is Iterable)return new fD.tD(g);return g;}class u{var VB;var UB;final  hashCode= ++u.mC;static var mC=0;} JB( g)=>g.VB!=null&&g.VB.head!=null; get q=>TB!=null; AB( g, h,i)=>TB.cE(g,h,i); m( g, j,l, h, i){if((j&(k.OB|k.PB))==0){if(h==i)return;}if(QB==null){QB=[] ;zC(oC);}if(g.UB==null){g.UB=[] ;QB.add(g);}g.UB.add(new k(j,l,h,i));} nC(){}var TB;var HC=100;var QB;var RB; oC(){var v=0;while (QB!=null||RB!=null){var j=QB;QB=null;var i=RB;RB=null;if(v++ ==HC){pC(j,i);return;}if(j!=null){for(var h in j){var hB=h.UB;h.UB=null;for(var g=h.VB.head;g!=null;g=g.next){var l=g.value;try {l(hB);}catch (FC,KB){ZB(FC,KB,l,'from ${h}');}}}}if(i!=null){i.forEach((YC,EC){EC.dE();});}}} pC( l, j){var g=[] ;if(l!=null){for(var i in l){var hB=i.UB;g.add('${i} ${hB}');}}if(j!=null){for(var v in j.values){var h=v.dE();if(h!=null)g.add('${v} ${h}');}}QB=null;RB=null;var KB='exceeded notifiction limit of ${HC}, possible ' 'circular reference in observer callbacks: ${g.take(10).join(", ")}';sC(KB);}class kB{static var qC=0;final  eE= ++kB.qC;final  fE;final  gE;final  hE;final  iE=new Map();final  jE=[] ;var kE=false;var lE;kB(this.fE,this.gE,this.hE); toString()=>hE!=null?'<observer ${eE}: ${hE}>':'<observer ${eE}>'; aE(){var h=TB;TB=this;try {lE=fE();if(lE is Iterable&&lE is !List&&lE is !u){lE=(lE as Iterable).toList();}}catch (g,i){ZB(g,i,fE,'from ${this}');lE=null;}iE.forEach(mE);iE.clear();assert(TB==this);TB=h;nE();return jE.length>0;} oE( i){try {gE(i);}catch (g,h){ZB(g,h,gE,'from ${this}');}} nE(){var g=lE;if(g is !u)return;jE.add(tB(g,(h){oE(new jB(g,g,h));}));} cE( v, KB,g){var i=iE.putIfAbsent(v,()=>new Map());try {var h=i[g];if(h==null)h=0;i[g]=h|KB;}catch (j,l){ZB(j,l,g,'hashCode or operator == from ${this}');}} mE( i, j){jE.add(tB(i,(l){if(kE)return;for(var g in l){var h=j[g.key];if(h!=null&&(h&g.type)!=0){kE=true;if(RB==null){RB=new qB.SplayTreeMap();}RB[eE]=this;return;}}}));} bE(){for(var g in jE){g();}kE=false;} dE(){if(!kE)return null;var g=lE;bE();aE();try {if(g==lE)return null;}catch (i,j){ZB(i,j,g,'operator == from ${this}');return null;}var h=new jB(g,lE);oE(h);return h;}}typedef  rC( message);var sC=(g)=>print(g);typedef  tC(error,stackTrace,obj, message);var ZB=uC; uC(i,g,h, j){print('web_ui.observe: unhandled error calling ${h} ${j}.\n' 'error:\n${i}\n\nstack trace:\n${g}');}class IC<EB> extends AD with u implements Set<EB>{final  pE;final  qE;IC({ createMap}):pE=createMap!=null?createMap():new Map<EB,Object>(),qE=createMap;factory IC.vD( g,{ createMap}){return new IC<EB>(createMap:createMap)..addAll(g);} contains( g){if(q)AB(this,k.DB,g);return pE.containsKey(g);} add( g){var h=pE.length;pE[g]=const Object();if(h!=pE.length){m(this,k.t,'length',h,pE.length);m(this,k.OB,g,null,g);}} remove( g){if(q)AB(this,k.DB,g);var h=pE.length;pE.remove(g);if(h!=pE.length){if(JB(this)){m(this,k.PB,g,g,null);m(this,k.t,'length',h,pE.length);}return true;}return false;} clear(){if(JB(this)){for(var g in pE.keys){m(this,k.PB,g,g,null);}m(this,k.t,'length',pE.length,0);}pE.clear();} get length{if(q)AB(this,k.t,'length');return pE.length;} get isEmpty=>length==0; get iterator=>new iD<EB>(this); addAll( g)=>g.forEach(add); toString(){if(q){for(EB g in pE.keys){AB(this,k.DB,g);}}return pE.keys.toSet().toString();}}class iD<EB> implements Iterator<EB>{final  rE;final  sE;var tE=false;iD( g):rE=g,sE=g.pE.keys.iterator; moveNext(){rE.length;return tE=sE.moveNext();} get current{var g=sE.current;if(q&&tE)AB(rE,k.DB,g);return g;}}class vC{}class wC{}class BB<CB>{var uE;var vE;var wE;var xE;BB.wD( g,this.wE):xE=g{if(wE!=null)wE.yE++ ;} get next=>vE; get value=>xE;set value( g)=>xE=g; zE( g, h){vE=h;uE=g;if(g!=null)g.vE=this;if(h!=null)h.uE=this;return this;} append( g)=>new BB<CB>.wD(g,wE).zE(this,vE); remove(){if(wE==null)return;wE.yE-- ;if(uE!=null){uE.vE=vE;}else{wE.AF=vE;}if(vE!=null){vE.uE=uE;}else{wE.BF=uE;}vE=null;uE=null;wE=null;}}class uB<CB> extends qB.IterableBase<CB>{var AF;var BF; get length=>yE;var yE=0;uB(){} get head=>AF; add( h){var g=new BB<CB>.wD(h,this);if(BF==null)return AF=BF=g;return BF=g.zE(BF,null);} addLast( g)=>add(g); addAll( g)=>g.forEach(add); get iterator=>new jD<CB>(this);}class jD<CB> implements Iterator<CB>{var CF;var wE;var DF;var EF=-1;jD(this.wE){CF=new List<BB>(wE.length);var h=0;var g=wE.head;while (g!=null){CF[h++ ]=g;g=g.next;}} get current=>DF; moveNext(){do{EF++ ;}while(EF<CF.length&&CF[EF].wE!=wE);if(EF<CF.length){DF=CF[EF].value;return true;}else{DF=null;return false;}}}aB(h,g)=>h.hashCode*31+g.hashCode;xC(h,g,i)=>aB(aB(h,g),i);yC(g,i,h,j)=>aB(aB(g,i),aB(h,j)); zC( h()){var g=new rD.ReceivePort();g.receive((i,j){g.close();h();});g.toSendPort().send(null);}abstract class AD extends qB.IterableBase<dynamic>{}abstract class BD extends qB.ListMixin<dynamic>{} CD(i, g,[ h]){var j=i is vC;if(h==null){h=i.toString();}if(!j&&g is FB.Text){g.text=h;}else{var l=g;g=j?new FB.Element.html(h):new FB.Text(h);l.replaceWith(g);}return g;} DD(g){if(g is wC)return g.toString();g=g.toString();return FD(g)?g:'#';}const ED=const["http","https","ftp","mailto"]; FD( h){var g=Uri.parse(h).scheme;if(g=='')return true;return ED.contains(g.toLowerCase())||"MAILTO"==g.toUpperCase();}abstract class lB{ fB(){} insert(); remove();}class kD extends lB{final  TC;var FF;final  listener;kD(this.TC,this.listener); insert(){FF=TC.listen(listener);} remove(){FF.cancel();FF=null;}}abstract class JC extends lB{final exp;final  isFinal;final  zB;var GB;JC(this.exp,this.isFinal):zB=vB&&mB!=null?mB():null; insert(){if(isFinal){AC();}else if(GB!=null){throw new StateError('binding already attached');}else{GB=CC();}} remove(){if(!isFinal){GB();GB=null;}} AC(); CC();}class lD extends JC{final  action;lD(g,this.action, h):super(g,h); AC()=>action(new jB(null,exp())); CC()=>nB(exp,action,'generic-binding',zB);}class mD extends JC{final  XC;final  VC;mD( g,this.XC,this.VC, h):super(g,h); GF(g){XC(VC?DD(g):g);} AC()=>GF(exp()); CC()=>nB(exp,(g)=>GF(g.newValue),'dom-property-binding',zB);}class KC extends lB{final  BC;final  children=[] ;final  nodes=[] ;KC(this.BC); listen( i, h){children.add(new kD(i,(g){h(g);MD();}));} RC( h,i){var g=new FB.Text('');children.add(new lD(()=>'${h()}',(j){g=CD(h(),g,j.newValue);},i));return g;} XD(g,j,h,[i=false]){children.add(new mD(g,j,i,h));} TD( h,g,i){children.add(new HD(h,g,i));} loop( h,g,i){children.add(new nD(h,g,i));} add( g)=>nodes.add(g); addAll( g)=>nodes.addAll(g); fB(){for(var g=0,h=children.length;g<h;g++ ){children[g].fB();}} insert(){for(var g=0,h=children.length;g<h;g++ ){children[g].insert();}} remove(){for(var g=children.length-1;g>=0;g-- ){children[g].remove();}children.clear();}}abstract class LC extends KC{final exp;var GB;LC( g,this.exp):super(g); fB(){} insert(){super.fB();if(nodes.length>0){var i=BC.parentNode;var j=BC.nextNode;for(var g=0,h=nodes.length;g<h;g++ ){i.insertBefore(nodes[g],j);}}super.insert();} remove(){super.remove();for(var g=nodes.length-1;g>=0;g-- ){nodes[g].remove();}nodes.clear();}}typedef  GD( template);class HD extends LC{var pB=false;final  QC;HD( h,g,this.QC):super(h,g); insert(){GB=nB(exp,(g){if(!pB&&g.newValue){QC(this);super.insert();pB=true;}else if(pB&&!g.newValue){super.remove();pB=false;}},'conditional-binding');} remove(){super.remove();GB();GB=null;}}typedef  ID( list, index, template);class nD extends LC{final  WC;nD( h,g,this.WC):super(h,g); insert(){GB=nB(exp,(i){super.remove();var h=i.newValue;for(int g=0;g<h.length;g++ ){WC(h,g,this);}super.insert();},'loop-binding');} remove(){super.remove();GB();GB=null;}}var MC=false;var vB=false;var mB=(){try {throw "";}catch (h,g){return g.toString();}};final  bB=new MB('watcher'); JD(g, KB,[ j, v]){if(MC)return kC(g,KB);if(KB==null)return (){};if(cB==null)cB=new uB<dB>();j=j==null?'<unnamed>':j;var i;var h=w.QD;if(g is PC){i=(g as PC).HF;}else if(g is Function){i=g;try {var l=g();if(l is List){h=w.eB;}else if(l is Iterable){h=w.eB;i=()=>g().toList();}else if((l is qB.LinkedHashMap)||(l is qB.SplayTreeMap)){h=w.yB;}else if(l is Map){h=w.xB;}}catch (hB,EC){bB.DC('evaluating ${j} watcher threw error (${hB}, ${EC})');}}else if(g is List){i=()=>g;h=w.eB;}else if(g is Iterable){i=()=>g.toList();h=w.eB;}else if((g is qB.LinkedHashMap)||(g is qB.SplayTreeMap)){i=()=>g;h=w.yB;}else if(g is Map){i=()=>g;h=w.xB;}if(vB&&v==null&&mB!=null){v=mB();}var YC=KD(h,i,KB,j,v);var FC=cB.add(YC);return FC.remove;} KD( l, g, j, h, i){switch (l){case w.eB:return new oD(g,j,h,i);case w.yB:return new qD(g,j,h,i);case w.xB:return new pD(g,j,h,i);default:return new dB(g,j,h,i);}} nB(h, i,[ j, l]){var v=JD(h,i,j,l);var g=h;if(g is Function){g=g();}if(g is Iterable&&g is !List){g=g.toList();}i(new jB(null,g));return v;}var cB;class dB{final  SC;var location;final  IF;static var LD=0;final  HF;final  JF;var KF;dB(this.HF,this.JF,this.SC,this.location):IF=LD++ {KF=HF();} toString()=>'${SC} (id: #${IF})'; SD(){var g=LF();if(MF(g)){var h=KF;NF(g);JF(new jB(h,g));return true;}return false;} MF(g)=>KF!=g; NF(g){if(vB){if(location!=null){bB.info('watcher updated: ${this}, defined at:\n${location}');location=null;}else{bB.info('watcher updated: ${this}');}}KF=g;}LF(){try {return HF();}catch (g,h){bB.DC('${this} watcher threw an exception: ${g}, ${h}');}return KF;}}final  NC=10; MD(){if(cB==null)return;var g;var h=0;do{g=false;for(var i in cB){if(i.SD()){g=true;}}}while(g&& ++h<NC);if(h==NC){bB.DC('Possible loop in watchers propagation, stopped dispatch.');}}typedef  OC<ND>();typedef  OD<ND>( value);class PC<ND>{}class oD<ND> extends dB{oD(g, j, h, i):super(g,j,h,i){NF(LF());} MF( g){return wB(KF,g);} NF(g){KF=new List<ND>.from(g);}}class pD<oB,PD> extends dB{pD(g, j, h, i):super(g,j,h,i){NF(LF());} MF( g){var i=KF.keys;if(i.length!=g.keys.length)return true;var j=i.iterator;while (j.moveNext()){var h=j.current;if(!g.containsKey(h))return true;if(KF[h]!=g[h])return true;}return false;} NF(g){KF=new Map<oB,PD>.from(g);}}class qD<oB,PD> extends dB{qD(g, j, h, i):super(g,j,h,i){NF(LF());} MF( g){return wB(g.keys,KF.keys)||wB(g.values,KF.values);} NF(g){KF=new qB.LinkedHashMap.from(g);}} wB( i, j){var h=i.iterator;var g=j.iterator;while (h.moveNext()){if(!g.moveNext())return true;if(h.current!=g.current)return true;}return g.moveNext();}class w{final OF;const w.xD(this.OF);toString()=>'Enum.${OF}';static const eB=const w.xD('LIST');static const xB=const w.xD('HASH_MAP');static const yB=const w.xD('ORDERED_MAP');static const QD=const w.xD('OTHER');}//@ sourceMappingURL=multiselect.html_bootstrap.dart.map
