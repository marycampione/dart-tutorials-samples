import "dart:async" as q;import "dart:html" as s;class IB{final  name;const IB(this.name);}class JB{const JB();}class KB{const KB();}BB(){} CB(){var NB=s.document.body;var OB=new LB(NB);OB.m();OB.insert();}main(){FB=false;i.u.HB.listen((g){print('${g.w.name.toLowerCase()}: ${g.message}');});BB();CB();}var t=false;var DB=h.EB;class i{final  name;final  parent;var PB;var children;var QB;var RB;factory i( g){if(g.startsWith('.')){throw new ArgumentError("name shouldn't start with a '.'");}if(k==null)k=<String,i>{};if(k.containsKey(g))return k[g];var n=g.lastIndexOf('.');var j=null;var o;if(n==-1){if(g!='')j=new i('');o=g;}else{j=new i(g.substring(0,n));o=g.substring(n+1);}final AB=new i.MB(o,j);k[g]=AB;return AB;}i.MB(this.name,this.parent):children=new Map<String,i>(){if(parent!=null)parent.children[name]=this;} get w{if(t){if(PB!=null)return PB;if(parent!=null)return parent.w;}return DB;} get HB=>SB(); SB(){if(t||parent==null){if(QB==null){QB=new q.StreamController<l>.broadcast(sync:true);RB=QB.stream;}return RB;}else{return u.SB();}}static  get u=>new i('');static var k;}class h implements Comparable<h>{final  name;final  value;const h(this.name,this.value);static const  EB=const h('INFO',800); operator==( g)=>g!=null&&value==g.value; operator<( g)=>value<g.value; operator<=( g)=>value<=g.value; operator>( g)=>value>g.value; operator>=( g)=>value>=g.value; get hashCode=>value; toString()=>name;}class l{}abstract class v{ m(){} insert();}class LB extends v{final  GB;final  children=[] ;final  nodes=[] ;LB(this.GB); add( g)=>nodes.add(g); m(){for(var g=0,j=children.length;g<j;g++ ){children[g].m();}} insert(){for(var g=0,j=children.length;g<j;g++ ){children[g].insert();}}}var FB=false;//@ sourceMappingURL=search_form.html_bootstrap.dart.map
